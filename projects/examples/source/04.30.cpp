///////////////////////////////////////////////////////////////////////////////////

#include <cstdint>
#include <type_traits>

///////////////////////////////////////////////////////////////////////////////////

template < typename B, typename D > class is_base_of
{
private :

	static std::int32_t test(...);

	static std::int64_t test(B *);

public :

	constexpr static auto value = sizeof(test(static_cast < D * > (nullptr))) == 8;
};

///////////////////////////////////////////////////////////////////////////////////

template 
< 
	typename B, typename D 
> 
constexpr auto is_base_of_v = is_base_of < B, D > ::value;

///////////////////////////////////////////////////////////////////////////////////

class Entity {};

///////////////////////////////////////////////////////////////////////////////////

class Client : public Entity {};

///////////////////////////////////////////////////////////////////////////////////

class Server {};

///////////////////////////////////////////////////////////////////////////////////

int main()
{
	static_assert(     is_base_of_v < Entity, Client > == 1);

	static_assert(     is_base_of_v < Entity, Server > == 0);

	static_assert(     is_base_of_v < Client, Client > == 1);

//  ---------------------------------------------------------

	static_assert(std::is_base_of_v < Entity, Client > == 1);

	static_assert(std::is_base_of_v < Entity, Server > == 0);

	static_assert(std::is_base_of_v < Client, Client > == 1);
}

///////////////////////////////////////////////////////////////////////////////////