///////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <cstdint>

///////////////////////////////////////////////////////////////////////////////

enum class State : std::uint8_t 
{ 
	slow, fast 
};

///////////////////////////////////////////////////////////////////////////////

struct Entity 
{
	State state = State::slow;
};

///////////////////////////////////////////////////////////////////////////////

class Command
{
public :

	Command(Entity & entity, State state) : m_entity(entity), m_state(state) {}

//  ---------------------------------------------------------------------------

	void operator()() const
	{
		m_entity.state = m_state;
	}

private :

	Entity & m_entity;
	
	State m_state = State::slow;
};

///////////////////////////////////////////////////////////////////////////////

int main()
{
	Entity entity(State::slow);

//  ---------------------------------------------------------

	Command command(entity, State::fast);

//  ---------------------------------------------------------

	command();

//  ---------------------------------------------------------

	assert(entity.state == State::fast);

//  ---------------------------------------------------------

	auto lambda = [&entity](){ entity.state = State::slow; };

//  ---------------------------------------------------------

	lambda();

//  ---------------------------------------------------------

	assert(entity.state == State::slow);
}

///////////////////////////////////////////////////////////////////////////////