//////////////////////////////////////////////////////////////

#include <atomic>
#include <cassert>
#include <type_traits>

//////////////////////////////////////////////////////////////

int main()
{
    std::atomic < int > x = 1, y = 2;

//  ----------------------------------------------------------

	auto z = 3;

//  ----------------------------------------------------------

    assert(decltype(x)::is_always_lock_free);

//  ----------------------------------------------------------
    
//  x = y; // error  

//  ----------------------------------------------------------

	static_assert(std::is_same_v < decltype(z = 1), int & > );

	static_assert(std::is_same_v < decltype(x = 1), int   > );

//  ----------------------------------------------------------
    
    assert(x.load() == 1);

//  ----------------------------------------------------------

	x.store(2);

//  ----------------------------------------------------------
	
	assert(x.exchange(3) == 2);

//  ----------------------------------------------------------

	assert(x.compare_exchange_strong(z, 1) == 1 && x == 1);

    assert(x.compare_exchange_strong(z, 2) == 0 && z == 1);

//  ----------------------------------------------------------

    assert((x +  y) == +3);
	
	assert((x -  y) == -1);

	assert((x *  y) == +2);

	assert((x /  y) == +0);

	assert((x %  y) == +1);

//  ----------------------------------------------------------

	assert((x += y) == +3);

	assert((x -= y) == +1);

//	assert((x *= y) == +2); // error

//	assert((x /= y) == +1); // error

//	assert((x %= y) == +1); // error

//  ----------------------------------------------------------

	assert(x.fetch_add(1) == 1);
			
	assert(x.fetch_sub(1) == 2);

//  ----------------------------------------------------------

	assert((x ++  ) == +1);

	assert((x --  ) == +2);

	assert((  ++ y) == +3);

	assert((  -- y) == +2);

//  ----------------------------------------------------------

	assert((x <  y) ==  1);

	assert((x >  y) ==  0);

	assert((x <= y) ==  1);

	assert((x >= y) ==  0);

	assert((x == y) ==  0);

	assert((x != y) ==  1);
}

//////////////////////////////////////////////////////////////