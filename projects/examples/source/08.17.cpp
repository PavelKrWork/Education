//////////////////////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <cstdio>
#include <limits>
#include <print>
#include <sstream>
#include <stdexcept>
#include <string>
#include <tuple>

//////////////////////////////////////////////////////////////////////////////////////////////////

#include <boost/multiprecision/cpp_int.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////////

int main()
{
    using uint128_t = boost::multiprecision::uint128_t;

//  ----------------------------------------------------------------------------------------------  

    assert(std::numeric_limits < uint128_t > ::digits10 == 38);

//  ----------------------------------------------------------------------------------------------  

    assert(std::numeric_limits < uint128_t > ::max() + 1 == 0);

//  ----------------------------------------------------------------------------------------------  

    try
    {
        std::ignore = boost::multiprecision::checked_uint128_t(0) - 1;
    }
    catch (std::range_error const & exception)
    {
        std::print(stderr, "main : {}\n", exception.what());
    }

//  ----------------------------------------------------------------------------------------------

    using int_t = boost::multiprecision::cpp_int;

//  ----------------------------------------------------------------------------------------------

    int_t x(std::string(32, '1'));
	
    int_t y(std::string(32, '2'));

//  ----------------------------------------------------------------------------------------------

    assert((x += y) == int_t( "33333333333333333333333333333333"));

    assert((x -= y) == int_t( "11111111111111111111111111111111"));

    assert((x *= y) == int_t( "246913580246913580246913580246908641975308641975308641975308642"));

    assert((x /= y) == int_t( "11111111111111111111111111111111"));

//  ----------------------------------------------------------------------------------------------

    assert((x ++  ) == int_t( "11111111111111111111111111111111"));

    assert((x --  ) == int_t( "11111111111111111111111111111112"));

    assert((  ++ y) == int_t( "22222222222222222222222222222223"));

    assert((  -- y) == int_t( "22222222222222222222222222222222"));

//  ----------------------------------------------------------------------------------------------

    assert((x +  y) == int_t( "33333333333333333333333333333333"));

    assert((x -  y) == int_t("-11111111111111111111111111111111"));

    assert((x *  y) == int_t( "246913580246913580246913580246908641975308641975308641975308642"));

    assert((x /  y) == int_t( "0"));

//  ----------------------------------------------------------------------------------------------

    assert((x <  y) == 1);

    assert((x >  y) == 0);

    assert((x <= y) == 1);

    assert((x >= y) == 0);

    assert((x == y) == 0);

    assert((x != y) == 1);

//  ----------------------------------------------------------------------------------------------

    std::stringstream stream_1(std::string(32, '1'));

    std::stringstream stream_2;

//  ----------------------------------------------------------------------------------------------

    stream_1 >> x;

    stream_2 << x;

//  ----------------------------------------------------------------------------------------------

    assert(stream_2.str() == stream_1.str());
}

//////////////////////////////////////////////////////////////////////////////////////////////////