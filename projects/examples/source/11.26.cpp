///////////////////////////////////////////////////////////////////////////

#include <cstddef>
#include <print>
#include <string>
#include <tuple>
#include <utility>

///////////////////////////////////////////////////////////////////////////

using namespace std::literals;

///////////////////////////////////////////////////////////////////////////

template < typename T, std::size_t ... Is > void show
(
    T && tuple, std::index_sequence < Is ... >
)
{
    std::print("show : tuple = {{ ");

    (..., (std::print("{} ", std::get < Is > (tuple))));

    std::print("}}\n");
}

///////////////////////////////////////////////////////////////////////////

template < typename ... Ts > void show(const std::tuple < Ts ... > & tuple)
{
    show(tuple, std::make_index_sequence < sizeof...(Ts) > ());
}

///////////////////////////////////////////////////////////////////////////

int main()
{
    show(std::make_tuple(1, "aaaaa"s));
}

///////////////////////////////////////////////////////////////////////////