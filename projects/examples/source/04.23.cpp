//////////////////////////////////////////////////////////////////////

#include <cassert>
#include <cmath>
#include <string>
#include <tuple>

//////////////////////////////////////////////////////////////////////

using namespace std::literals;

//////////////////////////////////////////////////////////////////////

auto equal(double x, double y, double epsilon = 1e-6)
{
	return std::abs(x - y) < epsilon;
}

//////////////////////////////////////////////////////////////////////

int main()
{
    auto tuple = std::make_tuple(1, 2.0, "aaaaa"s);

//  ------------------------------------------------------------------

	static_assert(std::tuple_size_v < decltype(tuple) > == 3);

//  ------------------------------------------------------------------

    assert(std::get < 0 > (tuple) == 1);

//  ------------------------------------------------------------------

    auto const & [x1, y1, string] = tuple; // support : cppinsights.io

//  ------------------------------------------------------------------

    auto x2 = 0, y2 = 0;

//  ------------------------------------------------------------------

    std::tie(x2, y2, std::ignore) = tuple;

//  ------------------------------------------------------------------

    assert(x1 == x2 && equal(y1, y2) && string == "aaaaa");
}

//////////////////////////////////////////////////////////////////////