///////////////////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <limits>
#include <string>

///////////////////////////////////////////////////////////////////////////////////////////////

#include <boost/multiprecision/cpp_bin_float.hpp>

///////////////////////////////////////////////////////////////////////////////////////////////

template < typename T > auto equal(T x, T y, T epsilon = std::numeric_limits < T > ::epsilon())
{
	return boost::multiprecision::abs(x - y) < epsilon;
}

///////////////////////////////////////////////////////////////////////////////////////////////

int main()
{
    using float_100_t = boost::multiprecision::cpp_bin_float_100;

//  -------------------------------------------------------------

    float_100_t x("0." + std::string(100, '3'));

    float_100_t y = 1.0 / 3;

    float_100_t z = 1;

//  -------------------------------------------------------------

    z /= 3;

//  -------------------------------------------------------------

    assert(equal(x, y) == 0);

    assert(equal(x, z) == 1);
}

///////////////////////////////////////////////////////////////////////////////////////////////